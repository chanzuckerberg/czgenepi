Comment: SWIPE single-wdl pipeline entry point
StartAt: PreprocessInput
TimeoutSeconds: 259200 # 72 hours (total execution run time, including Batch job scheduling delays)
States:
  PreprocessInput:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "${preprocess-input}"
      Payload: &PassthroughStatePayload
        ExecutionId.$: $$.Execution.Id
        CurrentState.$: $$.State.Name
        Input.$: $
    OutputPath: $.Payload
    Next: RunSPOT
  RunSPOT:
    Type: Task
    Resource: arn:aws:states:::batch:submitJob.sync
    Parameters:
      JobQueue: "${batch_spot_job_queue_name}"
      JobName.$: $$.Execution.Name
      JobDefinition: &JobDefinition "${batch_job_definition_name}"
      Timeout: &RunBatchTimeout
        AttemptDurationSeconds: 36000 # 10 hours
      ContainerOverrides:
        Vcpus.$: $.RunSPOTVcpu
        Memory.$: $.RunSPOTMemory
        Environment: &RunEnvironment
          - Name: AWS_DEFAULT_REGION
            Value: "${aws_default_region}"
          - Name: REMOTE_DEV_PREFIX
            Value: "${remote_dev_prefix}"
          - Name: DEPLOYMENT_STAGE
            Value: "${deployment_stage}"
          - Name: WDL_INPUT_URI
            Value.$: $.RUN_INPUT_URI
          - Name: WDL_WORKFLOW_URI
            Value.$: $.RUN_WDL_URI
          - Name: WDL_OUTPUT_URI
            Value.$: $.RUN_OUTPUT_URI
          - Name: SFN_EXECUTION_ID
            Value.$: $$.Execution.Id
          - Name: SFN_CURRENT_STATE
            Value.$: $$.State.Name
    ResultPath: $.BatchJobDetails.Run
    Next: RunSPOTReadOutput
    Retry: &BatchRetryConfig
      - ErrorEquals: ["Batch.AWSBatchException"]
        IntervalSeconds: 15
        MaxAttempts: 3
    Catch:
      - ErrorEquals: ["States.ALL"]
        ResultPath: $.BatchJobError.RunSPOT
        Next: RunSPOTReadOutput
  RunSPOTReadOutput:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters: &ReadOutputParameters
      FunctionName: "${process-stage-output}"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    Next: HandleSuccess
    Catch:
      - ErrorEquals: &InputErrors
          - InvalidInputFileError
          - InsufficientReadsError
          - BrokenReadPairError
          - InvalidFileFormatError
        Next: HandleFailure
      - ErrorEquals: ["States.ALL"]
        ResultPath: $.BatchJobError.RunSPOT
        Next: RunEC2
  RunEC2:
    Type: Task
    Resource: arn:aws:states:::batch:submitJob.sync
    Parameters:
      JobQueue: "${batch_ec2_job_queue_name}"
      JobName.$: $$.Execution.Name
      JobDefinition: *JobDefinition
      Timeout: *RunBatchTimeout
      ContainerOverrides:
        Vcpus.$: $.RunEC2Vcpu
        Memory.$: $.RunEC2Memory
        Environment: *RunEnvironment
    ResultPath: $.BatchJobDetails.Run
    Next: RunEC2ReadOutput
    Retry: *BatchRetryConfig
    Catch:
      - ErrorEquals: ["States.ALL"]
        ResultPath: $.BatchJobError.RunEC2
        Next: RunEC2ReadOutput
  RunEC2ReadOutput:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters: *ReadOutputParameters
    OutputPath: $.Payload
    Next: HandleSuccess
    Catch:
      - ErrorEquals: ["States.ALL"]
        Next: HandleFailure
  HandleSuccess:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "${handle-success}"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    End: true
  HandleFailure:
    # The HandleFailure state is expected to read error details, do any housekeeping necessary, then raise an exception
    # with the error details (so they can be seen directly in the Step Functions API).
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      FunctionName: "${handle-failure}"
      Payload: *PassthroughStatePayload
    OutputPath: $.Payload
    End: true
