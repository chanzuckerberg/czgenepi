import { Icon, Tooltip, TooltipTable } from "czifui";
import { SyntheticEvent, useState } from "react";
import {
  AnalyticsTreeDetailsView,
  EVENT_TYPES,
} from "src/common/analytics/eventTypes";
import { analyticsTrackEvent } from "src/common/analytics/methods";
import { TREE_STATUS } from "src/common/constants/types";
import { useGroupInfo } from "src/common/queries/groups";
import { foldInLocationName } from "src/common/queries/locations";
import { IdMap } from "src/common/utils/dataTransforms";
import { NO_CONTENT_FALLBACK } from "src/views/Upload/components/common/constants";
import NextstrainConfirmationModal from "../NextstrainConfirmationModal";
import { PhyloTreeStatusTag } from "./components/PhyloTreeStatusTag";
import {
  CellWrapper,
  popperPropsSx,
  StyledDetailsTooltipTarget,
  StyledInfoIconWrapper,
  StyledNameWrapper,
  StyledRowContent,
  StyledTooltip,
  StyledTreeCreator,
  StyledTreeIconWrapper,
} from "./style";

interface Props {
  phyloRun: PhyloRun;
  locations: IdMap<NamedGisaidLocation>;
}

const getDateRangeString = (phyloRun: PhyloRun): string => {
  const { templateArgs, startedDate } = phyloRun;
  // NOTE: The start date default is covid-specific. We will need to update for
  // other pathogens
  // Unless otherwise specified, we use all Covid samples. The first covid sample
  // that we have is from 2019-12-23.
  const startDate = templateArgs?.filterStartDate || "2019-12-23";
  // If no end date is specified, the last day is the day the tree was created
  const endDate = templateArgs?.filterEndDate || startedDate?.slice(0, 10);

  return `${startDate} to ${endDate}`;
};

const TreeTableNameCell = ({ phyloRun, locations }: Props): JSX.Element => {
  const [open, setOpen] = useState(false);
  const { name, phyloTree, status, templateArgs, user } = phyloRun;
  const treeId = phyloTree?.id;
  const userName = user?.name;
  const isDisabled = status !== TREE_STATUS.Completed || !treeId;

  const { data: groupInfo } = useGroupInfo();

  const getLocationName = () => {
    const templateLocationId = templateArgs?.locationId;
    // If there is no locationId in templateArgs, either this is an old
    // tree or it was created with the default (group) location. If the
    // tree was created with the default location, we don't need to wait
    // for the namedLocations to return. However, if the groupInfo hasn't
    // come back yet, the location will be an empty string.
    if (!templateLocationId || templateLocationId === groupInfo?.location.id)
      return groupInfo?.location
        ? foldInLocationName(groupInfo?.location).name
        : "";
    // namedLocationsData takes a while to load. We do not want to show
    // the group location here because it is incorrect. Instead, we show
    // nothing until the data is ready.
    if (!locations) return "";
    return locations[templateLocationId].name;
  };

  const handleClickOpen = () => {
    if (!isDisabled) setOpen(true);
  };

  const handleClose = () => {
    setOpen(false);
  };

  // no user name associated with phylotree/run means it was autogenerated
  const isAutoGenerated = Boolean(!userName);
  const displayName = isAutoGenerated ? "Weekly Auto-Build" : userName;

  const onDetailsOpen = (event: SyntheticEvent<Element, Event>) => {
    event.stopPropagation();
    analyticsTrackEvent<AnalyticsTreeDetailsView>(
      EVENT_TYPES.TREE_DETAILS_VIEW,
      {
        tree_id: treeId || null,
      }
    );
  };

  const filterDetails = [
    {
      label: "Location",
      value: getLocationName(),
    },
    { label: "Date Range", value: getDateRangeString(phyloRun) },
    {
      label: "Lineages",
      value: templateArgs?.filterPangoLineages?.join(", ") || "All",
    },
  ];

  const detailsData = [
    {
      dataRows: filterDetails,
    },
  ];

  return (
    <>
      {treeId && (
        <NextstrainConfirmationModal
          open={open}
          onClose={handleClose}
          treeId={treeId}
        />
      )}
      <StyledRowContent onClick={handleClickOpen} disabled={isDisabled}>
        <CellWrapper data-test-id="tree-name-cell">
          <StyledTreeIconWrapper>
            <Icon sdsIcon="treeHorizontal" sdsSize="xl" sdsType="static" />
          </StyledTreeIconWrapper>
          <StyledNameWrapper>
            <span data-test-id="tree-status">
              {name || NO_CONTENT_FALLBACK}
              <PhyloTreeStatusTag treeStatus={status} />
            </span>
            <StyledTreeCreator data-test-id="tree-creator-name">
              <Tooltip
                placement="bottom-start"
                title={<TooltipTable data={detailsData} itemAlign="left" />}
                onOpen={onDetailsOpen}
                PopperProps={popperPropsSx}
              >
                <StyledDetailsTooltipTarget>Details</StyledDetailsTooltipTarget>
              </Tooltip>
              &nbsp;|&nbsp;
              {displayName}
              {isAutoGenerated && (
                <StyledTooltip
                  arrow
                  leaveDelay={200}
                  title="This tree is automatically built by CZ GEN EPI every Monday"
                  placement="bottom"
                >
                  <StyledInfoIconWrapper>
                    <Icon
                      sdsIcon="infoCircle"
                      sdsSize="xs"
                      sdsType="interactive"
                    />
                  </StyledInfoIconWrapper>
                </StyledTooltip>
              )}
            </StyledTreeCreator>
          </StyledNameWrapper>
        </CellWrapper>
      </StyledRowContent>
    </>
  );
};

export default TreeTableNameCell;
