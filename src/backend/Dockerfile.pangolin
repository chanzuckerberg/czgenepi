# Build UShER for use with pangolin 4+
FROM debian:bullseye AS usher
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
ENV DEBIAN_FRONTEND=noninteractive
USER root
RUN apt-get update && apt-get install -yq --no-install-recommends \
    git wget \
    ca-certificates \
    sudo python3 python3-pip
RUN mkdir -p /usherbuild
WORKDIR /usherbuild
# faSomeRecords and faSize are needed for the UShER WDL workflow
RUN wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/faSomeRecords
RUN wget http://hgdownload.soe.ucsc.edu/admin/exe/linux.x86_64/faSize
RUN chmod 775 *
## Checkout latest release
RUN git clone https://github.com/yatisht/usher.git
RUN cd usher && git checkout v0.6.2 && ./install/installUbuntu.sh

FROM python:3.10-slim-bullseye AS base
ENV FLASK_APP=aspen.main
EXPOSE 3000

# Install poetry
RUN apt update && apt install -y libdigest-sha-perl wget
ENV POETRY_VERSION=1.3.2
RUN python3 -m pip install poetry==$POETRY_VERSION

WORKDIR /usr/src/app

# boost and tbb are for supporting usher, which is for supporting pangolin.
RUN apt-get update && apt-get install -y  \
        make wget git jq gcc unzip curl bzip2 \
        libboost-filesystem1.74.0 \
        libboost-program-options1.74.0 \
        libboost-iostreams1.74.0 \
        libboost-date-time1.74.0 \
        libprotobuf23 \
        libtbb2

# Install Pangolin and PangoLEARN + deps (for ncov)
# The cov-lineages projects aren't available on PyPI, so install via git URLs.
RUN pip3 install snakemake==7.30.1
RUN pip3 install git+https://github.com/cov-lineages/pangolin.git@v4.3
RUN pip3 install git+https://github.com/cov-lineages/pangolin-data.git@v1.21
RUN pip3 install git+https://github.com/cov-lineages/scorpio.git@v0.3.17
RUN pip3 install git+https://github.com/cov-lineages/constellations.git@v0.1.12

# libtbb doesn't install well on bullseye:
RUN ln -s /usr/lib/x86_64-linux-gnu/libtbb.so.2 /usr/lib/x86_64-linux-gnu/libtbb_preview.so.2

# Download gofasta and minimap2 for Pangolin
RUN curl -fsSL https://github.com/virus-evolution/gofasta/releases/download/v1.2.0/gofasta-linux-amd64 \
 -o /usr/local/bin/gofasta && chmod a+x /usr/local/bin/gofasta
RUN curl -fsSL https://github.com/lh3/minimap2/releases/download/v2.24/minimap2-2.24_x64-linux.tar.bz2 \
  | tar xjvpf - --no-same-owner --strip-components=1 -C /usr/local/bin minimap2-2.24_x64-linux/minimap2 \
  && chmod a+x /usr/local/bin/gofasta

COPY --from=usher \
    /usherbuild/usher/build/compareVCF \
    /usherbuild/usher/build/faToVcf \
    /usherbuild/usher/build/matOptimize \
    /usherbuild/usher/build/matUtils \
    /usherbuild/usher/build/ripples \
    /usherbuild/usher/build/ripples-fast \
    /usherbuild/usher/build/ripplesInit \
    /usherbuild/usher/build/ripplesUtils \
    /usherbuild/usher/build/transpose_vcf \
    /usherbuild/usher/build/transposed_vcf_print_name \
    /usherbuild/usher/build/transposed_vcf_to_fa \
    /usherbuild/usher/build/transposed_vcf_to_vcf \
    /usherbuild/usher/build/usher \
    /usherbuild/usher/build/usher-sampled \
    /usr/local/bin

# Poetry: install app
COPY pyproject.toml poetry.lock environment.yaml ./
COPY third-party ./third-party
RUN wget https://github.com/chanzuckerberg/oso/archive/czge-oso25.zip -O oso.zip && \
    unzip -q oso.zip && \
    mv oso-czge-oso25/languages/python/sqlalchemy-oso sqlalchemy-oso && rm oso.zip
RUN poetry config virtualenvs.create false && \
    poetry install
ENV PYTHONPATH=.

COPY . .
# Install the aspen package
RUN poetry install
