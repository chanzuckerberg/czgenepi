name: Push Remote Dev

on:
  push:
    branches:
      - 'rdev-*'

env:
  # Force using BuildKit instead of normal Docker, required so that metadata
  # is written/read to allow us to use layers of previous builds as cache.
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_REPO: ${{ secrets.ECR_REPO }}/

jobs:
  build-push-images:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        image:
          - dockerfile: src/backend/Dockerfile.gisaid
            context: ./src/backend/
            name: aspen-gisaid
          - dockerfile: src/backend/Dockerfile.nextstrain
            context: ./src/backend/
            name: aspen-nextstrain
          - dockerfile: src/backend/Dockerfile.pangolin
            context: ./src/backend/
            name: aspen-pangolin
          - dockerfile: src/backend/Dockerfile
            context: ./src/backend/
            name: aspen-backend
          - dockerfile: src/frontend/Dockerfile
            context: ./src/frontend/
            name: aspen-frontend
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - run: docker buildx build --build-arg HAPPY_COMMIT=${GITHUB_SHA} --build-arg HAPPY_BRANCH=${GITHUB_REF} --cache-from ${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:branch-${GITHUB_REF##*/}  --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:branch-trunk --cache-to=type=inline,mode=max -t ${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:sha-${GITHUB_SHA:0:8}  -t ${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:branch-${GITHUB_REF##*/} -f ${{ matrix.image.dockerfile }} --push ${{ matrix.image.context }}

  create-update-rdev:
    runs-on: ubuntu-20.04
    needs:
      - build-push-images
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - uses: actions/checkout@v2
      - name: Install happy dependencies
        run: |
          pip install -r .happy/requirements.txt
      - name: Create update rdev
        env:
          TFE_TOKEN: ${{ secrets.TFE_TOKEN }}
        run: |
          RDEV_NAME=${GITHUB_REF#refs/heads/rdev-}
          if $(./scripts/happy --profile="" list | grep -q $RDEV_NAME); then
            echo "Updating stack $RDEV_NAME"
            ./scripts/happy --profile=""  update --tag sha-${GITHUB_SHA:0:8} $RDEV_NAME
          else
            echo "Creating stack $RDEV_NAME"
            ./scripts/happy --profile="" create  --tag sha-${GITHUB_SHA:0:8} $RDEV_NAME
          fi
