name: Push Tests

on:
  push:
    branches:
      - trunk
      - jgadling/lint-wdl
  pull_request:
    branches: "**"

env:
  # Force using BuildKit instead of normal Docker, required so that metadata
  # is written/read to allow us to use layers of previous builds as cache.
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  DOCKER_REPO: ${{ secrets.ECR_REPO }}/

jobs:
  wdl-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: run wdl check
        run: |
          pip3 install miniwdl==1.1.4
          sudo apt-get install -y shellcheck
          make wdl-lint
  tf-lint:
    runs-on: ubuntu-20.04
    steps:
      - uses: terraform-linters/setup-tflint@v1
        name: Setup TFLint
        with:
          tflint_version: v0.28.1
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.13.5
      - uses: actions/checkout@v2
      - name: run tflint
        run: |
          make tf-lint
  ts-lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Lint ts
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          # Build frontend image
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-frontend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-frontend:latest src/frontend
          make frontend-check-style
  ts-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Test ts
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          # Build frontend
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-frontend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-frontend:latest src/frontend
          make frontend-test
  ts-test-build:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Test ts build
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          mkdir src/frontend/build
          chmod -R a+w src/frontend/build
          # Build frontend
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-frontend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-frontend:latest src/frontend
          make frontend-test-build
  py-lint:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Lint Python
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          # Build backend image
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-backend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-backend:latest src/backend
          make backend-check-style
  py-test:
    runs-on: ubuntu-20.04
    steps:
      - name: Configure AWS prod Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Test Python
        run: |
          echo "DOCKER_REPO=${DOCKER_REPO}" > .env.ecr
          # Build backend image
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-backend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-backend:latest src/backend
          # Build frontend
          docker buildx build --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/aspen-frontend:branch-trunk -t ${{ secrets.ECR_REPO }}/aspen-frontend:latest src/frontend
          make local-init
          make backend-test
  build-push-images:
    if: github.ref == 'refs/heads/trunk'
    runs-on: ubuntu-20.04
    needs:
      - tf-lint
      - ts-lint
      - ts-test
      - ts-test-build
      - py-lint
      - py-test
    strategy:
      matrix:
        image:
        - dockerfile: src/backend/Dockerfile.gisaid
          context: ./src/backend/
          name: aspen-gisaid
        - dockerfile: src/backend/Dockerfile.nextstrain
          context: ./src/backend/
          name: aspen-nextstrain
        - dockerfile: src/backend/Dockerfile.pangolin
          context: ./src/backend/
          name: aspen-pangolin
        - dockerfile: src/backend/Dockerfile
          context: ./src/backend/
          name: aspen-backend
        - dockerfile: src/frontend/Dockerfile
          context: ./src/frontend/
          name: aspen-frontend
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - run: docker buildx build --build-arg HAPPY_COMMIT=${GITHUB_SHA} --build-arg HAPPY_BRANCH=${GITHUB_REF} --cache-from=type=registry,ref=${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:branch-trunk --cache-to=type=inline,mode=max -t ${{ secrets.ECR_REPO }}/${{ matrix.image.name }}:sha-${GITHUB_SHA:0:8} -f ${{ matrix.image.dockerfile }} --push ${{ matrix.image.context }}
  update-stage:
    needs:
      - build-push-images
    runs-on: ubuntu-20.04
    if: github.ref == 'refs/heads/trunk'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900
      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ECR_REPO }}
      - uses: actions/checkout@v2
      - name: Docker build, push, and tag
        shell: bash
        run: |
          pip install -r .happy/requirements.txt
          scripts/happy --profile="" addtags --source-tag sha-${GITHUB_SHA:0:8} --dest-tag branch-$(echo ${GITHUB_REF#refs/heads/} | sed 's/[\+\/]/-/g')
      - name: Generate payload
        run: |
          echo "payload={\"tag\":\"sha-${GITHUB_SHA:0:8}\"}" >> $GITHUB_ENV
      - uses: avakar/create-deployment@v1.0.2
        with:
          auto_merge: false
          environment: staging
          payload: ${{ env.payload }}
          required_contexts: ""  # Temporary hack to avoid checking Github Status for the commit
          # TODO: Avoid circular dependency on the deploy step; this step hasn't finished yet so
          # it's not considered ready for deploy normally by required_contexts, but we need to
          # deploy for this to be considered ready.
          # Unfortunately there is no blocklist for required_contexts, only an allowlist, so
          # we'd have to enumerate every other Github PR status here, which can be constantly changing.
          # For now, we just ignore required_contexts to deploy on every success.
          # See https://github.community/t/can-i-avoid-creating-a-check-run-from-a-job-needed-for-deployments-api/16426
        env:
          GITHUB_TOKEN: ${{ secrets.CZIBUILDBOT_GITHUB_TOKEN }}


